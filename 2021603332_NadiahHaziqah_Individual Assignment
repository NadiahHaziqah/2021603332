#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>

#define MAX_CHILDREN 10
#define BUFFER_SIZE 256


int num_child = 0;
pid_t child_pids[MAX_CHILDREN];
int pipe_fd[2];

void interrupt_handler(int sig){
	//show interrupt message and exit program
		printf("\nInterrupt detected.Exit program. \n");
		exit(0);
}

int main(){

	//set up interrupt handler

		signal(SIGINT, interrupt_handler);

	//pipe for message passing

		if (pipe(pipe_fd) == -1){
		perror("pipe");
		exit(1);
		}


	//Fork into child process
	 
		while (num_child < MAX_CHILDREN){
	
		pid_t pid = fork();
	
		if (pid == -1){
		perror ("fork");
		exit(1);
		}
		else if (pid == 0){
	 
	//Child proces
		close (pipe_fd[1]);
		char buffer[BUFFER_SIZE];
	
	while(1){
	//read message from pipe
		int bytes_read = read(pipe_fd[0],buffer,BUFFER_SIZE);

		if (bytes_read == -1){
			perror("read");
                    exit(1);

		}
		else if (bytes_read == 0){
			//End of file 
			break;
		}
		else {
			//Display message on screen/terminal
			printf("Child %d received message : %s", getpid() , buffer);
		}
		
		}

		close(pipe_fd[0]); // Close read end of pipe
		exit(0);
		}
		
		else{
		
		//Parent process
			child_pids[num_child]=pid;
			num_child++;
		}

		}


		//Parent process 
		close(pipe_fd[0]); // Close read end of pipe
		char buffer[BUFFER_SIZE];
		
		while(1){
	
		//Get message from user via keyboard entry 
		printf("Enter message to send to child process(Ctrl+ C to exit):");

		fgets(buffer,BUFFER_SIZE,stdin);

		//Send message to child process via pipe

		for(int i=0;i<num_child;i++){
			int bytes_written = write(pipe_fd[1], buffer , strlen(buffer));

			if (bytes_written == -1){

			perror("write");
			exit(1);
		}
		}
		}

		close(pipe_fd[1]);			//close write end of pipe
		return 0;
		} 
